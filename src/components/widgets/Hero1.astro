---
import Button from '~/components/ui/Button.astro';
import type { CallToAction } from '~/types';

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | unknown; // TODO: find HTMLElementProps
}

const {
  id,
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  //image = await Astro.slots.render('image'),
} = Astro.props;
---

<section class="relative md:-mt-[0px] not-prose" {...(id ? { id } : {})}>
  <div class="absolute inset-0 bg-no-repeat bg-center bg-cover bg-fixed" style="background-image: url('https://neighbourspa-176512119.imgix.net/bosque_chiloe.webp');"></div>
  <div class="absolute inset-0 bg-black bg-opacity-60 pointer-events-none" aria-hidden="true"></div> <!-- SuperposiciÃ³n negra semitransparente -->
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-30 md:py-40">
      <div class="text-center pb-10 md:pb-6 max-w-5xl mx-auto">
        {tagline && (
          <p
            class="text-base text-secondary text-white dark:text-white font-bold tracking-wide uppercase"
            set:html={tagline}
          />
        )}
        {title && (
          <h1
            class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white dark:text-gray-200 animate-zoom-in"
            set:html={title}
          />
        )}
        <div class="max-w-3xl mx-auto">
          {subtitle && (
            <p class="text-xl text-muted mb-6 dark:text-slate-300 animate-zoom-in" set:html={subtitle} />
          )}
          {actions && (
            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )}
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
